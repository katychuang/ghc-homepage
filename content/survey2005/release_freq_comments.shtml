<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--Rendered using the Haskell Html Library v0.2-->
<HTML
><HEAD
><TITLE
>Comments on &quot;Are new versions released often enough?&quot;</TITLE
></HEAD
><BODY BGCOLOR="#e0e0e0"
><H1
>Comments on &quot;Are new versions released often enough?&quot;</H1
></BODY
><TABLE ALIGN="center" WIDTH="800" CELLSPACING="10" CELLPADDING="5"
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I see new versions coming out pretty quickly, with lots of cool new features.  I am impressed.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>It is far more important that the stable releases really are stable than beeing numerous.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Although the releases are not infrequent, I think it would be nice to have bug-fix releases 3-4 times a year. But considering the number of people that actively work on GHC, that could be unreasonable.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>really, i don't have any opinion. why should i complete this field? :)</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>A large project really doesn't want to see new versions too often - it's very costly to change compiler versions if there are -any- incompatibilities.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Releases are, if anything, a bit too frequent.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I would like to see faster bug fixing turnaround.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>There always seems to be a working version compatible with my fairly conservative code, for all platforms.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>However, I think it would be better if releases were a /bit/ more frequent.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Real even-odd numbering, with lots of point releases, would be great, if the personnel exists for it.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Rather too often, I think-- and maybe a touch too enthusiastic on adding new stuff and not keeping backwards compatiblity. I suppose this is the cost of living at the bleeding edge.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>yes. the exception is of course GpH. GpH team keeps me and my students tied to old  and stupid C plus MPI</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Perhaps it would be a good idea to announce how much disc-space is needed, my first build of version 6.4 failed because I had only about 900M left in my root partition :-(</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I often use older versions because they meet my needs.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Has a free software project ever released often enough for the users? *grin*</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I would like it if new versions could find their way into Debian better.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I'm not a heavy user of new features.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>jn</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Actually, I would rather see more, but that more my craving for novelty. I don't *need* to.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>GHC 6.4 (6.4 without Cabal support and 7.0 with, perhaps) should have been released a lot earlier, IMHO.
I've been using GHC 6.3 just to access the new TH for a long time and it hasn't been pleasant.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>possibly too often</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Well, I don't think that the current tempo is a problem. But I do think that GHC could be released a little more often. Often when some new language feature is implemented people are eager to try it out. As soon as the implementation is done GHC could be shipped in an unstable version for people to play with.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>We don't want to have to fix things too often. :-)

On the other had of course there is always pressure for new features. :-)

It can become tricky to support a range of ghc versions. We end up needing a lot of #if #endif stuff. Perhaps that's inevitable.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Instead of new versions, I'd like to see a focus on developing a new standard version of Haskell, solidifying the most popular extensions.  I'm concerned that programs I write using (sometimes necessary) extensions with GHC today won't work in the future.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I am impressed with how often they are released!  I think the frequency is just right, long enough for the last one to get settled in, but not so long that it feels like all developement has stopped.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>See comments above. One always likes new versions. My reply is forced by the form rather than considered. </TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Too often</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Haven't been in to haskell long enough to know</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Just about the time when I start wondering when the next GHC will be released, for whatever reason, the next version is generally announced.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I hardly ever feel that I need the latest-greatest type system extension. However, this might be different for other researchers. As a library maintainer, stability is much more important. Maybe you should consider two kinds of GHC releases: latest type-system wonders, and latest Haskell98 stable?</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Compatibility between releases seems sticky sometimes at the application level.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>At present GHC seems to be adding cool new things faster than I have time to learn about thim.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I think it's good that new versions are not released all too often. It's become
reasonably simple to build from CVS, so if one wants new features to play with,
that's ok. I would like more releases of supporting software, however: happy, alex, especially haddock are released too infrequently for my taste.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>this is a vivant thing!</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>things generally seem to come out about as fast as I keep up with them</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>For bleeding edge, CVS is not se broken most of the time. Though, GHC 6.3 was hard to build during the compatibility library transition.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Recently, as I need some new features of Data&gt;generics, I had to install the beta
(6.4-date) version. But it works well for me.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I haven't had much of a reason to upgrade my installation of GHC for a long time... The pars I've used (ie the &quot;core&quot; Haskell stuff) have been working alright for some time</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Haven't thought this before on GHC - generally, I think that any active sw should have a stable release in 6 to 12 months regularly, but I also realize that this is  much a question of time &amp; money of the people involved, too.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Don't want to many releases, want to stablise on a good release and perhaps only release minor bug fixes</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I'd like to keep up-to-date with the latest-and-greatest so that I could work out examples from recent academic papers, but I don't want to have to build my own GHC from the head to get there.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I actually don't know, but there is no option for that.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I don't have time to install updates all the time. I prefer stability to frequency.
</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>GHC seems to be developed a lot faster than, say, GCC, which has very infrequent releases. </TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>as you might see above, I have not come to even try all existing features. 99% of my time i'm coding basic haskell without any extensions or special features</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Often enough that my own limited time means I don't miss features for long.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>doesn't matter release new versions every if there is nothing new?</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>No idea! Just got here!</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Although it was a long wait for 6.4 :)</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Sorry, not enough experience w/GHC yet.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Working on internals myself, I consider version numbering somewhat strange, issuing &quot;minor&quot; release numbers to important changes, e.g.: 
  5.04: completely new lib. structure (compared to 5.02)
  6.4 : completely new backend</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Especially the daily builds are frequent!</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>It might be nice to have more &quot;bug-fix&quot; releases, but I realize that with a small team this is probably too much work.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>It's a trade-off with stability. I'm happy with the process.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>release early - release often.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>The wait for GHC6.4 was a long one, on the other hand no point releasing something that is not ready. Maybe more releases so that the difference between them is not so large.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I seldom go to the trouble of installing (possibly unstable) CVS versions, which means that I have to wait for new features.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I just started using it so I am not sure how often new versions are released.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>GHC stable versions are often enough. I do wish for metastable releases for testing specific features.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Release them when they are ready.  Make them stable.
Though Haskell is effectively the de facto standard implementation, we could do with a new Haskell language standard.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I think the release frequency is about right.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Well yes and no really.  Yes, because because new releases break
ABI - ie all libraries need to be rebuilt with the new version.
No, since it would be nice to have more gradual regular updates. :)</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I think software should be released often, without putting too much changes in each release. This way it would be easier to track bugs and correct them.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Although my opinion here probably doesn't mean much because I'm tracking CVS-HEAD anyway.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Y80[Y90[9Y</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I compile from CVS every one or two weeks.
So in fact I am more interested in features than in versions</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>FFI don't refer the function this programm istead of other error.
(... but I don't know where is wrong.)

FFmpeg.o(.text+0x1398):fake: undefined reference to `av_init_packet'

(hsc)
-- -*- mode: haskell -*-
{-# OPTIONS -fglasgow-exts #-}
 
#include &lt;avformat.h&gt;
#include &lt;avcodec.h&gt;
 
module FFmpeg
where
 
import Foreign
 
data CAVPacket = CAVPacket {pktPts :: !(#type int64_t), pktDts :: !(#type int64_t),
                            pktDatas :: !(Ptr (#type uint8_t)), pktSize :: !Int, pktStreamIndex :: !Int,
                            pktFlags :: !Int, pktDuration :: !Int}
                            deriving (Eq,Show)
 
instance Storable CAVPacket where
  peek p   = do{ pts &lt;- (#peek AVPacket, pts) p; dts &lt;- (#peek AVPacket, dts) p;
                 datas &lt;- (#peek AVPacket, data) p; size &lt;- (#peek AVPacket, size) p;
                 stream_index &lt;- (#peek AVPacket, stream_index) p; flags &lt;- (#peek AVPacket, flags) p;
                 duration &lt;- (#peek AVPacket, duration) p;
                 return $! CAVPacket pts dts datas size stream_index flags duration }
  poke p (CAVPacket pts dts datas size stream_index flags duration)
            = do{(#poke AVPacket, pts) p pts; (#poke AVPacket, dts) p dts;
                 (#poke AVPacket, data) p datas; (#poke AVPacket, size) p size;
                 (#poke AVPacket, stream_index) p stream_index ; (#poke AVPacket, flags) p flags;
                 (#poke AVPacket, duration) p duration}
  sizeOf _  = (#size AVPacket)
  -- alignment &#x306e;&#x5024;&#x306b;&#x3064;&#x3044;&#x3066;&#x306f;&#x81ea;&#x4fe1;&#x306a;&#x3057;
  alignment _ = 7
 
 
av_init_packet :: IO (Ptr CAVPacket)
av_init_packet =
    alloca $ \pkt -&gt; do
        c_av_init_packet pkt
        return pkt
 
 
foreign import ccall unsafe &quot;av_init_packet&quot;
  c_av_init_packet :: Ptr CAVPacket -&gt; IO ()


{-
And Now, Newest Relese Candidate package of Windows can't load DLL.

Loading package base-1.0 ... linking ... done.
Loading package OpenGL-2.0 ... ghc.exe: can't load .so/.DLL for: m (addDLL: unkn
own error
-}</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>now that I'm more deeply involved in the release process (via cabal) I might change my mind, but in the past it has always seemed frequent enough.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>IMHO a compiler should not have too frequent releases, except for bugfixes. Introducing new features every 6 months or so would lead to user's code maintenance problems and potentilly great difficulties in re-using very old as well as very recent code.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Most of what is in a new release falls into the nice-to-have category, so the timing of releases is not a big deal.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Maybe when I start using more of the advanced idioms I might like new versions becoming available quicker (I'm certainly looking forward to using GADTs in 6.4).</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Persons depending on very new features should hopefully be
willing to patch.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>in general, yes. but not if you're on windows and have no interim snapshots.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>New major releases should be released only when they are stable enough. Bug-fix versions could instead be released more often.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Yes, usually, but not 6.4.
</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Yes of course.  New versions of a compiler are not needed often.  What is needed is carefully crafting bindings to standard libraries so that the design of the bindings doesn't impede further work on the compiler.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Developers who want to live on the cutting edge can get more recent anyway 
either straight from the CVS or automatically bundled tar files</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>this should not be an issue because cvs snapshots are available</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>But there are sometimes major changes as in the module structure between 6.2.2 and 6.4 or as in the set of (syntacticly) accepted programs between 6.* and 6.2.2. </TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>It's hard for me to remember back about this. Also, I have lots of conflicting interests. More frequent releases make packaging harder in some ways, but on the other hand it's possible to have less buggy packages without having a huge diff build up between releases.

On balance I think a higher frequency of point releases, especially for x.y.1 when x.y inevitably quickly reveals a number of issues (like doesn't compile on powerpc this time round), would be good.

Unfortunately, due to a combination of where we are in the Debian release process coupled with technical details I won't bore you with I've had to keep 6.4 out of Debian for the time being, so problems arising from us won't be found as quickly as I'd normally hope we'd be able to.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Actually I don't know, I'm sort of new to this.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>please don't get driven by timescales make it driven by need / functionality</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>New version seem to be released frequently.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>In hindsight, a release between 6.2.2 and 6.4 could have been a good idea. That way, 6.4 (or what then would have been 6.4.1) could wait until Cabal was finished, which seems will not be the case. But then again, things like these are hard to predict. More than a year between 6.2.2 and 6.4 seems long though, especially since 6.4 brings many new toys, like GADTs. :)</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>The nightly snapshots are a great idea: less hassle than CVS and more reliable reference points, and always there when the latest official release is not up to the task...</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>No, the automated daily builds should be sufficient be be on the bleeding edge. A release cycle of 6-9 month ok.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Consider the improvements and features added in each new version, I'd say the development cycle is efficient.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>More often than I need 'em.
</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Yes, considering improvements the make. Of course, I wouldn't mind if we had the same feature set and stability two years ago. But for that, GHC needs more developers. In this month I've switched from full-time to part-time job (4/5), so I'll have one free day during the week for playing with things like GHC development :-)</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>I would rather have versions of GHC released whenever a major new feature (or set of related features) is added, instead of grouping a bunch of unrelated features together, seemingly arbitrarily. Thus, the current GHC 6.4 would have been preceded by a series of intermediate versions, 6.3.1, 6.3.2, 6.3.3, etc. I think having these intermediate releases would result in more testing. For example, people on Windows could not even test GHC 6.3 without building from source, but if they wanted to build everything from source they probably wouldn't be using Windows (and plus, it is time consuming to build GHC from source). If you had released GHC 6.3.1, GHC 6.3.2, etc. then I think that more people would use these intermediate releases and would find bugs sooner, with the result being that GHC 6.4 would look a lot more like the (presumably) upcoming GHC 6.4.1 release.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>not quite.  Automatic incremental software update would be nice.</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>well, i don't know but there is a new release this month :)</TD
></TR
><TR
><TD BGCOLOR="#ffffff" STYLE="border: 1px solid #000000"
>Maybe even too often.</TD
></TR
></TABLE
></HTML
>
